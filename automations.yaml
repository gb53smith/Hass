#Turns ON Back Irrigation if no other zones are turned ON
#My 24V 500mA can only safely power one value at a time
#Set start times in the trigger sections
#and the ON time in the delay section
#Note that the start time must be staggered to meet conditions
  - alias: 'Back Irrigation'
    initial_state: False
    trigger:
# "-" needed only for multiple triggers/conditions/services
    - platform: time
      at: '06:30:00'
    - platform: time
      at: '19:00:00'
    condition:
# These conditions not really needed since the hardware was 
# modified to only allow one relay ON at a time.
# If a command is received to turn one relay ON the others
# are turned OFF.
      condition: and
      conditions:
        - condition: state
          entity_id: switch.deck_irrigation
          state: 'off'
        - condition: state
          entity_id: switch.front_irrigation
          state: 'off'
# Copy this to Front Irrigation when not using cold frame
# float is needed to convert string state to float for comparison
# Deck irrigation is mostly under cover so I need watering every day.
        - condition: template
          value_template: '{{ states.sensor.yesterday_rainfall.state | float < 5 }}'
    action:
      service: script.turn_on
      entity_id: script.ir_back


  - alias: 'Front Irrigation'
    initial_state: False
    trigger:
    - platform: time
      at: '07:00:00'
    - platform: time
      at: '19:30:00'
    condition: 
      condition: and
      conditions:
        - condition: state
          entity_id: switch.deck_irrigation
          state: 'off'
        - condition: state
          entity_id: switch.back_irrigation
          state: 'off'
        - condition: template
          value_template: '{{ states.sensor.yesterday_rainfall.state | float < 5 }}'
    action:
      service: script.turn_on
      entity_id: script.ir_front  
        
  - alias: 'Deck Irrigation'
    initial_state: False
    trigger:
    - platform: time
      at: '07:30:00'
    - platform: time
      at: '20:00:00'
    condition: 
      condition: and
      conditions:
        - condition: state
          entity_id: switch.back_irrigation
          state: 'off'
        - condition: state
          entity_id: switch.front_irrigation
          state: 'off'
        - condition: template
          value_template: '{{ states.sensor.yesterday_rainfall.state | float < 5 }}'
    action:
      service: script.turn_on
      entity_id: script.ir_deck
        
  - alias: 'Irrigation Safety'
# In case some interruption occurs while a zone is ON
# Not sure this is necessary but does not hurt to include
# Time are after the last zone cycle
    initial_state: True
    trigger:
    - platform: time
      at: '08:30:00'
    - platform: time
      at: '20:30:00'
    action:
      - service: homeassistant.turn_off
        entity_id: group.irrigation_switches
        
# Turn ON on hour before sunset an setup random ON/OFF time for lights when Away    
  - alias: 'Living Room Light ON'
    initial_state: True
    trigger:
      platform: sun
      event: sunset
      offset: "-01:00:00"
    action:
      - service: switch.turn_on
        entity_id: switch.leviton_dzr151lz_binary_scene_switch_switch
      - service: python_script.random_lights

          
# Turn OFF at input_datetime.lr_off_time ONLY when not on vacation
  - alias: 'Living Room Light OFF at Home'
    initial_state: True
    trigger:
      platform: template
      value_template: >
        {{ (states.input_datetime.lr_off_time.attributes.timestamp | int 
        | timestamp_custom("%H:%M", False)) == states.sensor.time.state}}   
    condition:
      condition: state    
      entity_id: input_boolean.vacation
      state: 'off'     
    action:
      service: switch.turn_off
      entity_id: switch.leviton_dzr151lz_binary_scene_switch_switch    
      
  - alias: 'Living Room Light OFF when Vacation'
    initial_state: True
    trigger:
      platform: template
      value_template: >
        {{ (states.input_datetime.lr_off_time_random.attributes.timestamp | int 
        | timestamp_custom("%H:%M", False)) == states.sensor.time.state}}  
    condition:
      condition: state    
      entity_id: input_boolean.vacation
      state: 'on'     
    action:
      service: switch.turn_off
      entity_id: switch.leviton_dzr151lz_binary_scene_switch_switch

  - alias: 'Bedroom Room Light ON when on Vacation'
    initial_state: True
    trigger:
      platform: template
      value_template: >
        {{ (states.input_datetime.br_on_time_random.attributes.timestamp | int 
        | timestamp_custom("%H:%M", False)) == states.sensor.time.state}}   
    condition:
      condition: state    
      entity_id: input_boolean.vacation
      state: 'on'     
    action:
      service: switch.turn_on
      entity_id: switch.leviton_dz15s_1bz_decora_smart_switch_switch

  - alias: 'Bedroom Room Light OFF when on Vacation'
    initial_state: True
    trigger:
      platform: template
      value_template: >
        {{ (states.input_datetime.br_off_time_random.attributes.timestamp | int 
        | timestamp_custom("%H:%M", False)) == states.sensor.time.state}}  
    condition:
      condition: state    
      entity_id: input_boolean.vacation
      state: 'on'     
    action:
      service: switch.turn_off
      entity_id: switch.leviton_dz15s_1bz_decora_smart_switch_switch   

  - alias: Notify iOS App Joyce
    initial_state: True
    trigger:
      platform: state
      entity_id: sensor.back_lock_last_action
      to: 'Unlocked: Joyce'
    action:
      service: notify.ios_grahams_iphone
      data:
        message: "Joyce Unlocked Door"
        
  - alias: Notify iOS App Oliver
    initial_state: True
    trigger:
      platform: state
      entity_id: sensor.back_lock_last_action
      to: 'Unlocked: Oliver'
    action:
      service: notify.ios_grahams_iphone
      data:
        message: "Oliver Unlocked Door"
# Temperature Control Notes
# binary_sensor.away is controlled only by sensor.back_lock_last_action.  Set by locking back door either by Me or Oliver.
# input_binary.vacation is controlled by GUI slide switch.
# When either binary_sensor.away or input_binary.vacation is ON the temperature set point is set to away temp.
# The home temperature set point is enabled once if input_binary.vacation goes OFF.
# The back door must be unlocked or locked from the inside to turn OFF the binary_sensor.away and return
# to normal heating schedule.
### Vacation mode can be cleared upon arrival at the airport but the back door must
### be unlocked to resume heating next morning 
# switch.away state is used to control the indicator LED on the thermostat.  
#   It is set OFF when either binary_sensor.away goes OFF or
#   input_binary.vacation goes OFF. 
#   It is set ON when either binary_sensor.away goes ON or
#   input_binary.vacation goes ON. 
# Change thermostat set point to slider_home temp at datetime.heat_on_time
# but only if home and not on vacation
  - alias: Set Home Setpoint
    initial_state: True
    trigger:
      platform: template
      value_template: >
        {{ (states.input_datetime.heat_on_time.attributes.timestamp | int 
        | timestamp_custom("%H:%M", False)) == states.sensor.time.state}}  
    condition: 
      condition: and
      conditions:
        - condition: state
          entity_id: binary_sensor.away
          state: 'off'
        - condition: state
          entity_id: input_boolean.vacation
          state: 'off'    
    action:
      - service: climate.set_temperature
        data_template:
          entity_id: climate.house
          temperature: "{{ states('input_number.slider_home')}}"
      - service: climate.set_temperature
        data_template:
          entity_id: climate.summer_fan
          temperature: !secret temperature_fan

# Change thermostat set point to slider_away temp at datetime.heat_off_time
  - alias: Set Away or Asleep Setpoint
    initial_state: True
    trigger:
      platform: template
      value_template: >
        {{ (states.input_datetime.heat_off_time.attributes.timestamp | int 
        | timestamp_custom("%H:%M", False)) == states.sensor.time.state}}  
    action:
      service: climate.set_temperature
      data_template:
        entity_id: climate.house
        temperature: "{{ states('input_number.slider_away')}}"
        
# Turn furnace OFF if its has been ON 7 minutes and the temperature is above the set point 
# Needs to be tested       
  - alias: Furnace Safety
    initial_state: True
    trigger:
      platform: state
      entity_id: switch.furnace
      to: 'on'
      for:
        minutes: 7
    condition:
      condition: template
      value_template: >
        {{ states.climate.house.attributes.current_temperature
        | float > states.climate.house.attributes.temperature | float }}
    action:
      service: switch.turn_off
      entity_id: switch.furnace
      
# Turn temperature set point down if away set when door locked from outside keypad
#Note: A normal template sensor did not trigger so the binary_sensor was used instead.
  - alias: Away
    initial_state: True
    trigger:
      platform: state
      entity_id: binary_sensor.away
      to: 'on' 
    action:
      - service: climate.set_temperature
        data_template:
          entity_id: climate.house
          temperature: "{{ states('input_number.slider_away')}}"
      - service: climate.set_temperature
        data_template:
          entity_id: climate.summer_fan
          temperature: !secret temperature_fan_away
      - service: switch.turn_on
        entity_id: switch.away


# Return temperature set point when returning
# between heat ON and OFF times if not on vacation
  - alias: Home
    initial_state: True
    trigger:
      platform: state
      entity_id: binary_sensor.away
      to: 'off'
    condition: 
      condition: and
      conditions:
        - condition: state
          entity_id: input_boolean.vacation
          state: 'off'
        - condition: template
          value_template: >
            {{ (now().hour * 60 + now().minute) * 60  
              > states.input_datetime.heat_on_time.attributes.timestamp and 
              (now().hour * 60 + now().minute) * 60 
              < states.input_datetime.heat_off_time.attributes.timestamp }}  
    action:
      - service: climate.set_temperature
        data_template:
          entity_id: climate.house
          temperature: "{{ states('input_number.slider_home')}}"
      - service: climate.set_temperature
        data_template:
          entity_id: climate.summer_fan
          temperature: !secret temperature_fan

# Unconditional switch.away tracking of binary_sensor.away
  - alias: Home to Away OFF
    initial_state: True
    trigger:
      platform: state
      entity_id: binary_sensor.away
      to: 'off'
    action:
      - service: switch.turn_off
        entity_id: switch.away 
        
# Force temperature_away, immediately, when vacation switched ON
  - alias: Vacation ON
    initial_state: True
    trigger:
      platform: state
      entity_id: input_boolean.vacation
      to: 'on'
    action:
      - service: climate.set_temperature
        data_template:
          entity_id: climate.house
          temperature: "{{ states('input_number.slider_away')}}"
      - service: climate.set_temperature
        data_template:
          entity_id: climate.summer_fan
          temperature: !secret temperature_fan_away
      - service: switch.turn_on
        entity_id: switch.away


# Force temperature_home when vacation switched OFF
# and time is between heat ON and OFF times.
  - alias: Vacation OFF
    initial_state: True
    trigger:
      platform: state
      entity_id: input_boolean.vacation
      to: 'off'
    condition:
      - condition: template
        value_template: >
          {{ (now().hour * 60 + now().minute) * 60  
            > states.input_datetime.heat_on_time.attributes.timestamp and 
            (now().hour * 60 + now().minute) * 60 
            < states.input_datetime.heat_off_time.attributes.timestamp }} 
    action:
      - service: climate.set_temperature
        data_template:
          entity_id: climate.house
          temperature: "{{ states('input_number.slider_home')}}"
      - service: climate.set_temperature
        data_template:
          entity_id: climate.summer_fan
          temperature: !secret temperature_fan
        
# Unconditional switch.away tracking of input_boolean.vacation
  - alias: Vacation OFF to Away OFF
    initial_state: True
    trigger:
      platform: state
      entity_id: input_boolean.vacation
      to: 'off'
    action:
      - service: switch.turn_off
        entity_id: switch.away
                
  - alias: Furnace Ramp ON
    initial_state: True
    trigger:
      platform: state
      entity_id: switch.furnace
      to: 'on'
    action:
      service: script.turn_on
      entity_id: script.furnace_timer
      
  - alias: Furnace OFF
    initial_state: True
    trigger:
      platform: state
      entity_id: switch.furnace
      to: 'off'
    action:
      - service: homeassistant.turn_off
        entity_id: 
          - script.furnace_timer
          - script.timer_heat0
          - script.timer_heat1
          - switch.heat1
          - switch.heat0
      - service: input_number.set_value
        data:
          entity_id: input_number.slider_power
          value: 0
        
# Send Notification if temperature reaches min_temp or max_temp.
  - alias: Notify House Out of Range Temperature
    initial_state: True
    trigger:
      - platform: template
        value_template: '{{ states.sensor.temperature.state | float > 25.0 }}'
      - platform: template
        value_template: '{{ states.sensor.temperature.state | float < 15.0 }}'
    action:
      service: notify.ios_grahams_iphone
      data:
        message: "House Temperature Out of Range"
        
# Send Notification if Wine Cellar temperature reaches min_temp or max_temp.
  - alias: Notify Wine Out of Range Temperature
    initial_state: True
    trigger:
      - platform: template
        value_template: '{{ states.sensor.remote_temperature.state | float > 15.5 }}'
      - platform: template
        value_template: '{{ states.sensor.remote_temperature.state | float < 10.0 }}'
    action:
      service: notify.ios_grahams_iphone
      data:
        message: "Wine Cellar Temperature Out of Range"
        
# Send Notification if Outdoor battery voltage is below 3.2 volts and needs to be charged
  - alias: Notify Battery Needs Changing
    initial_state: True
    trigger:
      - platform: template
        value_template: '{{ states.sensor.mysensors_bme280_2_4.state | float < 3.2 }}'
    action:
      service: notify.ios_grahams_iphone
      data:
        message: "Outdoor battery needs to be charged."

  - alias: Basement Flood Alarm
    initial_state: True
    trigger:
      platform: state
      entity_id: sensor.flood
      to: 'ON'
    action:
      service: notify.ios_grahams_iphone
      data:
        message: "Basement Flood Detected!"

# Changed time to time_pattern for HA86.1        
  - alias: Watchdog
    initial_state: True
    trigger:
      platform: time_pattern
      minutes: '/10'
    action:
      - service: switch.turn_on
        entity_id: switch.watchdog
      - delay:  0:05:00
      - service: switch.turn_off
        entity_id: switch.watchdog
        
# Send a notice to iPhone if watchdog state stays in ON state too long
  - alias: Watchdog Alarm ON
    initial_state: True
    trigger:
      platform: state
      entity_id: switch.watchdog
      # Must be lower case for internal state
      to: 'on'
      for:
        hours: 0
        minutes: 5
        seconds: 10
# Disable watchdog alarm if getting too many alarms
# Not that useful since only one alarm is generated if multisensor hangs up.
    condition:
      - condition: state
        entity_id: input_boolean.watchdog
        state: 'off'
    action:
      service: notify.ios_grahams_iphone
      data:
        message: "Multisensor ON Failed!"
        
# Send a notice to iPhone if watchdog state stays in OFF state too long
  - alias: Watchdog Alarm OFF
    initial_state: True
    trigger:
      platform: state
      entity_id: switch.watchdog
      to: 'off'
      for:
        hours: 0
        minutes: 5
        seconds: 10
  # Disable watchdog alarm if getting too many alarms
    condition:
      - condition: state
        entity_id: input_boolean.watchdog
        state: 'off'
    action:
      service: notify.ios_grahams_iphone
      data:
        message: "Multisensor OFF Failed!"
  
  # Turn all switches OFF on reboot and send notification 10 minutes later
  # Restore heat if not on vacation and  time is between heat ON and heat OFF times.
  # Restore summer fan depending on vacation status.  Note !secrets does not work in template.
  - alias: HA Restarted
    initial_state: True
    trigger:
      platform: homeassistant
      event: start
    action:
      - service: homeassistant.turn_off
        data:
          entity_id: group.switches_off_at_restart
      - service: climate.set_temperature
        data_template:
          entity_id: climate.house
          temperature: >
            {% if is_state('input_boolean.vacation', 'off') and 
              (now().hour * 60 + now().minute) * 60  
              > states.input_datetime.heat_on_time.attributes.timestamp and 
              (now().hour * 60 + now().minute) * 60 
              < states.input_datetime.heat_off_time.attributes.timestamp %}
              {{ states('input_number.slider_home')}}
            {% else %}
              {{ states('input_number.slider_away')}}
            {% endif %}
      - service: climate.set_temperature
        data_template:
          entity_id: climate.summer_fan
          temperature: >
            {% if is_state('input_boolean.vacation', 'off') %}
              25
            {% else %}
              30
            {% endif %}
      - service: python_script.random_lights
      - delay:
          minutes: 10
      - service: notify.ios_grahams_iphone
        data:
          message: "HA Restarted"

# When home slider changes, change heating set point only when home
# and the time is between heat ON and heat OFF times.          
  - alias: Home Slider Changed
    initial_state: True
    trigger:
      platform: state
      entity_id: input_number.slider_home
    condition: 
      condition: and
      conditions:
        - condition: state
          entity_id: binary_sensor.away
          state: 'off'
        - condition: state
          entity_id: input_boolean.vacation
          state: 'off'
        - condition: template
          value_template: >
            {{ (now().hour * 60 + now().minute) * 60  
              > states.input_datetime.heat_on_time.attributes.timestamp and 
              (now().hour * 60 + now().minute) * 60 
              < states.input_datetime.heat_off_time.attributes.timestamp }}  
    action:
      - service: climate.set_temperature
        data_template:
          entity_id: climate.house
          temperature: "{{ states('input_number.slider_home')}}"

# When home slider changes, change heating set point only when away
# or the time is between heat OFF and heat ON times. 
  - alias: Away Slider Changed
    initial_state: True
    trigger:
      platform: state
      entity_id: input_number.slider_away
    condition: 
      condition: or
      conditions:
        - condition: state
          entity_id: binary_sensor.away
          state: 'on'
        - condition: state
          entity_id: input_boolean.vacation
          state: 'on'
        - condition: template
          value_template: >
            {{ (now().hour * 60 + now().minute) * 60  
              > states.input_datetime.heat_off_time.attributes.timestamp or 
              (now().hour * 60 + now().minute) * 60 
              < states.input_datetime.heat_on_time.attributes.timestamp }}           
    action:
      - service: climate.set_temperature
        data_template:
          entity_id: climate.house
          temperature: "{{ states('input_number.slider_away')}}"

# Monitor Mom's Medical Alert System and notify if system has lost connection
# to the internet.          
  - alias: Medalert1 Alarm
    initial_state: True
    trigger:
      platform: state
      entity_id: binary_sensor.ruth_cottage
      to: 'off'
      for:
        minutes: 11
    action:
      service: notify.ios_grahams_iphone
      data:
        message: "Medalert1 System Down!"
        
        
# Create an input_number entity for irrigation delay / ON time
# Reset at 12:00 to 10 minutes
# Increase at 16:00 to 10 minutes plus 1 minute for every degree above 24.0
  - alias: 'Irrigation ON Time Reset'
    initial_state: True
    trigger:
      platform: time
      at: '12:00:00'
    action:
      service: input_number.set_value
      data_template:
        entity_id: input_number.slider_delay
        value: '10'
        
  - alias: 'Irrigation ON Time Adjust'
    initial_state: True
    trigger:
      platform: time
      at: '16:00:00'        
    condition:
      - condition: template
        value_template: >
          {{states.sensor.mysensors_bme280_2_2.state | float > 24.0}}        
    action:
      service: input_number.set_value
      data_template:
        entity_id: input_number.slider_delay
        value: '{{states.sensor.mysensors_bme280_2_2.state | int - 14}}'

# Count how many minutes the furnace fan in ON to determine 
# when the air filter needs replacing.        
  - alias: Increment fan on counter
    initial_state: True
    trigger:
      platform: time_pattern
      minutes: '/1'   
    condition: 
      condition: or
      conditions:
        - condition: state
          entity_id: switch.fan
          state: 'on'
        - condition: state
          entity_id: switch.furnace
          state: 'on'
    action:
      - service: counter.increment
        entity_id: counter.fan_on_minutes
        
  - alias: Reset fan on counter
    initial_state: True
    trigger:
      platform: state
      entity_id: input_boolean.fan_reset
      to: 'on'
    action:
      - service: counter.reset
        entity_id: counter.fan_on_minutes    
        
  - alias: Hourly Temperature Difference
    initial_state: True
    trigger:
      - platform: time_pattern
        minutes: '/5'      
    action:
      service: python_script.temp_diff
      data:
        temp_diff: temp_diff
        temp_diff_accum: temp_diff_accum
        hour_diff: hour_diff

        
  - alias: Hourly Energy
    initial_state: True
    trigger:
      - platform: state
        entity_id: sensor.furnace_power
      - platform: time_pattern
        hours: '/1'      
    action:
      service: python_script.energy
      data:
        power: furnace_power
        last_power: last_power
        energy_accum: energy_accum
        hourly_energy: hourly_energy
 
# Following automation is used to test energy.py script
# The Total Energy in one hour should be (10 + 30 + 5) * 10 /60 =  7.5 kWh
  # - alias: Power Pattern within window
    # initial_state: False
    # trigger:
      # - platform: time_pattern
        # minutes: 0      
    # action:
      # - service: input_number.set_value
        # data_template:
          # entity_id: input_number.power_test
          # value: '0'
      # - delay:
          # minutes: 20
      # - service: input_number.set_value
        # data_template:
          # entity_id: input_number.power_test
          # value: '10'
      # - delay:
          # minutes: 10
      # - service: input_number.set_value
        # data_template:
          # entity_id: input_number.power_test
          # value: '30'
      # - delay:
          # minutes: 10
      # - service: input_number.set_value
        # data_template:
          # entity_id: input_number.power_test
          # value: '5'
      # - delay:
          # minutes: 10
      # - service: input_number.set_value
        # data_template:
          # entity_id: input_number.power_test
          # value: '0'

  # - alias: Power Pattern crossing window
    # initial_state: False
    # trigger:
      # - platform: time_pattern
        # minutes: '/2'      
    # action:
      # - service: input_number.set_value
        # data_template:
          # entity_id: input_number.power_test
          # value: '0'
      # - delay:
          # seconds: 50
      # - service: input_number.set_value
        # data_template:
          # entity_id: input_number.power_test
          # value: '10'
      # - delay:
          # seconds: 60
      # - service: input_number.set_value
        # data_template:
          # entity_id: input_number.power_test
          # value: '0'

  # - alias: Power Pattern On Boundary
    # initial_state: False
    # trigger:
      # - platform: time_pattern
        # minutes: '/3'      
    # action:
      # - service: input_number.set_value
        # data_template:
          # entity_id: input_number.power_test
          # value: '0'
      # - delay:
          # seconds: 60
      # - service: input_number.set_value
        # data_template:
          # entity_id: input_number.power_test
          # value: '10'
      # - delay:
          # seconds: 60
      # - service: input_number.set_value
        # data_template:
          # entity_id: input_number.power_test
          # value: '0'

  - alias: energy_values_to_file
    initial_state: false
    trigger:
      platform: state
      entity_id: sensor.hourly_energy
    action:
      - service: notify.energy_notify
        data_template: 
          message: ',{{ (states.sensor.hourly_energy.state | float) | round(2)}},{{ states.sensor.hour_diff.state }}'

  - alias: Daily Energy Total
    initial_state: True
    trigger:
      - platform: time_pattern
        minutes: '/30'      
    action:
      service: python_script.hour2day
      data:
        hourly: hourly_energy
        hourly_accum: hourly_energy_accum
        daily: daily_energy

  - alias: Daily Temp Diff Average
    initial_state: True
    trigger:
      - platform: time_pattern
        minutes: '/30'      
    action:
      service: python_script.hour2day
      data:
        hourly: hour_diff
        hourly_accum: hourly_temp_diff_accum
        daily: daily_temp_diff
        mode: average

  - alias: HVAC
    initial_state: True
    trigger:
      - platform: time_pattern
        minutes: '/5'      
    action:
      service: python_script.hvac

  - alias: 'Redirect all MQTT HVAC set commands to the heatpumps'
    trigger:
      - platform: mqtt
        topic: heatpump/_set/+
    action:
      - service: mqtt.publish
        data_template:
          topic:  '{{ "heatpump/set" }}'
          payload: >
            {% if trigger.topic.split("/")[-1] == "mode" %}
              {% if trigger.payload|upper == "OFF" %}
                {"power":"OFF"}
              {% elif trigger.payload == "fan_only" %}
                {"power":"ON","mode":"FAN"}
              {% else %}
                {{ "{\"power\":\"ON\",\"mode\":"|safe + trigger.payload|upper|tojson + "}" }}
              {% endif %}
            {% else %}
              {{ "{" + trigger.topic.split("/")[-1]|tojson + ":" + trigger.payload|tojson + "}" }}
            {% endif %}