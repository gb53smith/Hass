- platform: template
  sensors:
    temp_diff:
      friendly_name: "In-Out Temperature Diff"
      value_template: "{{ (states('sensor.house_temperature') | float(default=21)) - (states('sensor.mysensors_bme280_2_2') | float(default=10)) | round(1) }}"
      unit_of_measurement: "Â°C"

# Scaling factor used to convert 10 to the actual maximum furnace BTU value
# - platform: template
# sensors:
# furnace_power:
# friendly_name: 'Furnace Power'
# unit_of_measurement: 'kW'
# value_template: '{{ states('input_number.slider_power') | float * 1.948}}'

# - platform: template
# sensors:
# power_test:
# friendly_name: 'Power Test'
# unit_of_measurement: 'kW'
# value_template: '{{ states('input_number.power_test') | float }}'

# Added for the energy.py script.
# Units derived from the input power sensor

- platform: template
  sensors:
    hourly_energy:
      value_template: "{{ states('input_number.hourly_energy') | float }}"

- platform: template
  sensors:
    daily_energy:
      value_template: "{{ states('input_number.daily_energy') | float }}"
          
- platform: template
  sensors:
    hydro_hourly_energy:
      value_template: "{{ states('input_number.hydro_hourly_energy') | float }}"

- platform: template
  sensors:
    hydro_daily_energy:
      value_template: "{{ states('input_number.hydro_daily_energy') | float }}"        

- platform: template
  sensors:
    hour_diff:
      value_template: "{{ states('input_number.hour_diff') | float }}"

- platform: template
  sensors:
    daily_temp_diff:
      value_template: "{{ states('input_number.daily_temp_diff') | float }}"


- platform: random
  name: lr_random
  minimum: 0
  maximum: 30
  scan_interval: 3600

- platform: random
  name: br_random
  minimum: 0
  maximum: 10
  scan_interval: 3600

- platform: time_date
  display_options:
    - "time"
    - "date"

# Replaced by Python energy.py script
# - platform: integration
# source: sensor.furnace_power
# unit_time: h
# method: left

# - platform: template
# sensors:
# util_meter:
# friendly_name: 'Hourly Utility Meter'
# unit_of_measurement: 'kWh'
# value_template: '{{ states('sensor.furnace_hourly', 'last_period | float }}'

- platform: command_line
  name: Yesterday Rainfall
  unit_of_measurement: "mm"
  scan_interval: 10800
  command: "python3 /config/getrain.py"

- platform: template
  sensors:
    iaq:
      unit_of_measurement: "Index"
      value_template: >
        {% set humOffset = states('sensor.multisensor2_humidity')|float - 40.0 %}
        {% set gas = states('sensor.multisensor2_gas')|float %}
        {% set gasavg = states('input_number.box_gas')|float %}
        {% if humOffset > 0 %}
        {% set humScore = (60 - humOffset) * 0.417 %}
        {% else %}
        {% set humScore = (40 + humOffset) * 0.625 %}
        {% endif %}
        {% if (gasavg - gas) > 0 %}
        {% set gasScore =  gas / gasavg * 75  %}
        {% else %}
        {% set gasScore = 75 %}
        {% endif %}
        {% set score = (100 - humScore - gasScore) * 5 %}
        {% if score >= 301 %}
        6
        {% elif score >= 201  and  score <= 300 %}
        5
        {% elif score >= 176  and  score <= 200 %}
        4
        {% elif score >= 151  and  score <= 175 %}
        3
        {% elif score >= 51  and  score <= 150 %}
        2
        {% elif score >= 0  and  score <= 50 %}
        1
        {% endif %}

# The BME280 reacts too quickly for thermostat and needs smoothing
# - platform: filter
# name: "Filtered Temperature"
# entity_id: sensor.multisensor2_temperature
# filters:
# - filter: time_simple_moving_average
# window_size: '00:05:00'
# precision: 1

# If binary_sensor.ping fails switch temperature sensors
# Use input_number.last_house_temp to prevent spiking to 0 when MQTT restarted.
- platform: template
  sensors:
    house_temperature:
      friendly_name: "House Temperature"
      value_template: >
        {% if is_state("binary_sensor.ping_ms2", "on") %}
          {{states('input_number.last_house_temp') | float}}
        {% else %}
          {{state_attr('climate.mitsubishi_heatpump', 'current_temperature') | float}}
        {% endif %}

- platform: template
  sensors:
    furnace_power_plot:
      friendly_name: "Furnace Power Plot"
      unit_of_measurement: "kW"
      value_template: "{{ states('input_number.furnace_power')}}"

## Indoor soil moisture calibration    
- platform: template
  sensors:
    soil_moisture_1:
      value_template: >
        {% set raw = states('sensor.soil_moisture_sensor_8_1') | float%}
        {% set dry = states('input_number.soil_dry_1') | float %}
        {% set wet = states('input_number.soil_wet_1') | float %}
        {% set range = dry - wet %}
        {% set abovewet = raw - wet %}
        {% set abovewetfraction = abovewet / range %}
        {{(( 1 - abovewetfraction ) * 100) | int }}

## Outdoor soil moisture calibration    
- platform: template
  sensors:
    soil_moisture_2:
      value_template: >
        {% set raw = states('sensor.soil_moisture_sensor_4_1') | float%}
        {% set dry = states('input_number.soil_dry_2') | float %}
        {% set wet = states('input_number.soil_wet_2') | float %}
        {% set range = dry - wet %}
        {% set abovewet = raw - wet %}
        {% set abovewetfraction = abovewet / range %}
        {{(( 1 - abovewetfraction ) * 100) | int }}
        
- platform: template
  sensors:
    hepa_fan_speed:
      friendly_name: "Hepa Fan Speed"
      unit_of_measurement: "%"
      value_template: "{{ state_attr('fan.hepa_filter_fan','percentage')}}"

- platform: template
  sensors:
    wide_vane:
      friendly_name: "Wide Vane Setting"
      value_template: "{{ state_attr('fan.wide_vane','preset_mode')}}"
      
- platform: template
  sensors:
    hepa_filter_hours_rounded:
      friendly_name: "Hepa Filter Hours"
      value_template: "{{ states('input_number.hepa_hours') | round}}"
      